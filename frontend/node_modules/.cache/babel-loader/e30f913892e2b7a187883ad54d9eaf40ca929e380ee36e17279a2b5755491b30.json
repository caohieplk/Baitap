{"ast":null,"code":"var _jsxFileName = \"D:\\\\chatbot-llm\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport ChatWindow from './components/ChatWindow';\nimport MessageInput from './components/MessageInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const handleSendMessage = async newMessage => {\n    const updatedMessages = [...messages, {\n      role: 'user',\n      content: newMessage\n    }];\n    setMessages(updatedMessages);\n    setLoading(true);\n\n    // Gá»­i yÃªu cáº§u tá»›i backend\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/chat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        messages: updatedMessages\n      })\n    });\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder('utf-8');\n    let aiReply = '';\n    while (true) {\n      const {\n        done,\n        value\n      } = await reader.read();\n      if (done) break;\n      const chunk = decoder.decode(value);\n      const lines = chunk.split('\\n').filter(line => line.trim() !== '');\n      for (const line of lines) {\n        if (line === 'data: [DONE]') {\n          setLoading(false);\n          break;\n        }\n        if (line.startsWith('data: ')) {\n          const text = line.replace('data: ', '');\n          aiReply += text;\n          setMessages(prev => {\n            const lastMessage = prev[prev.length - 1];\n            if ((lastMessage === null || lastMessage === void 0 ? void 0 : lastMessage.role) === 'assistant') {\n              return [...prev.slice(0, -1), {\n                role: 'assistant',\n                content: aiReply\n              }];\n            } else {\n              return [...prev, {\n                role: 'assistant',\n                content: aiReply\n              }];\n            }\n          });\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83E\\uDDE0 Chat Bot LLM\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      messages: messages,\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      onSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hq4AwCU/cjqbSZgH8tz5GrloLy8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ChatWindow","MessageInput","jsxDEV","_jsxDEV","App","_s","messages","setMessages","loading","setLoading","handleSendMessage","newMessage","updatedMessages","role","content","response","fetch","process","env","REACT_APP_API_URL","method","headers","body","JSON","stringify","reader","getReader","decoder","TextDecoder","aiReply","done","value","read","chunk","decode","lines","split","filter","line","trim","startsWith","text","replace","prev","lastMessage","length","slice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","_c","$RefreshReg$"],"sources":["D:/chatbot-llm/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport ChatWindow from './components/ChatWindow';\nimport MessageInput from './components/MessageInput';\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const handleSendMessage = async (newMessage) => {\n    const updatedMessages = [...messages, { role: 'user', content: newMessage }];\n    setMessages(updatedMessages);\n    setLoading(true);\n\n    // Gá»­i yÃªu cáº§u tá»›i backend\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/chat`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ messages: updatedMessages }),\n    });\n\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder('utf-8');\n    let aiReply = '';\n\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) break;\n\n      const chunk = decoder.decode(value);\n      const lines = chunk.split('\\n').filter((line) => line.trim() !== '');\n\n      for (const line of lines) {\n        if (line === 'data: [DONE]') {\n          setLoading(false);\n          break;\n        }\n        if (line.startsWith('data: ')) {\n          const text = line.replace('data: ', '');\n          aiReply += text;\n          setMessages((prev) => {\n            const lastMessage = prev[prev.length - 1];\n            if (lastMessage?.role === 'assistant') {\n              return [...prev.slice(0, -1), { role: 'assistant', content: aiReply }];\n            } else {\n              return [...prev, { role: 'assistant', content: aiReply }];\n            }\n          });\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h2>ðŸ§  Chat Bot LLM</h2>\n      <ChatWindow messages={messages} loading={loading} />\n      <MessageInput onSendMessage={handleSendMessage} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}